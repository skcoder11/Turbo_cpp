#include <iostream.h>
#include <conio.h>

// Base class
class Base {
public:
    virtual void display() {
        cout << "Base class display()" << endl;
    }
};

// Derived class
class Derived : public Base {
public:
    void display() override {
        cout << "Derived class display()" << endl;
    }
};

int main() {
    clrscr(); // Clear the screen

    // Pointer to base class pointing to derived class object
    Base* ptr = new Derived();

    // Calling the virtual function through the pointer
    ptr->display(); // Calls Derived class display() because object is of Derived class type

    // Deleting dynamically allocated object
    delete ptr;

    getch(); // Wait for a key press
    return 0;
}
